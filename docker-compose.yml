version: "3.4"
services:
  portainer:
    container_name: portainer
    image: portainer/portainer
    restart: always
    command: --no-auth
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIGROOT}/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=myresolver"
      - "traefik.http.routers.portainer.middlewares=auth"

  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always
    command:
      - "--api"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=acme.json"
    ports:
      - 443:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIGROOT}/traefik/acme.json:/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.traefik.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      - "traefik.http.routers.traefik-rtr.middlewares=auth"
      - "traefik.http.services.traefik-rtr.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.auth.forwardauth.address=https://${DOMAIN}/api/v2/auth?group=1"

  openldap:
    container_name: openldap
    image: osixia/openldap:1.4.0
    restart: always
    tty: true
    stdin_open: true
    volumes:
      - ${CONFIGROOT}/openldap/db:/var/lib/ldap
      - ${CONFIGROOT}/openldap/config:/etc/ldap/slapd.d
    environment:
      - LDAP_ORGANISATION=${LDAP_ORGANISATION}
      - LDAP_DOMAIN=${DOMAIN}
      - LDAP_ADMIN_PASSWORD=${LDAP_ADMIN_PASSWORD}
      - LDAP_CONFIG_PASSWORD=${LDAP_CONFIG_PASSWORD}
      - LDAP_READONLY_USER=true
      - LDAP_READONLY_USER_USERNAME=readonly
      - LDAP_READONLY_USER_PASSWORD=${LDAP_READONLY_USER_PASSWORD}
      - LDAP_TLS=false

  phpldapadmin:
    container_name: phpldapadmin
    image: osixia/phpldapadmin:0.9.0
    restart: always
    depends_on:
      - openldap
    ports:
      - 8084:80
    volumes:
      - ${CONFIGROOT}/openldap/db:/var/lib/ldap
      - ${CONFIGROOT}/openldap/config:/etc/ldap/slapd.d
    environment:
      - PHPLDAPADMIN_LDAP_HOSTS=openldap
      - PHPLDAPADMIN_HTTPS=false

  fail2ban:
    container_name: fail2ban
    image: crazymax/fail2ban:latest
    restart: always
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - "${CONFIGROOT}/fail2ban:/data"
      - "${CONFIGROOT}/bitwarden:/bitwarden:ro"
      - "${CONFIGROOT}/organizr:/organizr:ro"
      - "/var/log:/var/log:ro"
    environment:
      - TZ=${TZ}
      - SSMTP_HOST=${SMTP_HOST}
      - SSMTP_HOSTNAME=${DOMAIN}
      - SSMTP_USER=${SMTP_USER}
      - SSMTP_PASSWORD=${SMTP_PASS}
      - SSMTP_TLS=YES
      - SSMTP_STARTTLS=YES

  organizr:
    container_name: organizr
    image: organizr/organizr:latest
    restart: always
    volumes:
      - ${CONFIGROOT}/organizr:/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=022
      - TZ=${TZ}
      - fpm=true
      - branch=v2-develop
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.organizr.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.organizr.entrypoints=websecure"
      - "traefik.http.routers.organizr.tls.certresolver=myresolver"

  bitwarden:
    container_name: bitwarden
    image: bitwardenrs/server
    depends_on:
      - traefik
    restart: always
    volumes:
      - ${CONFIGROOT}/bitwarden:/data
    environment:
      - TZ=${TZ}
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=false
      - ADMIN_TOKEN=${BITWARDEN_ADMIN_TOKEN}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_PORT=587
      - SMTP_SSL=true
      - SMTP_USERNAME=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASS}
      - LOG_FILE=/data/bitwarden.log
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bitwarden.entrypoints=websecure"
      - "traefik.http.routers.bitwarden.tls.certresolver=myresolver"
      - "traefik.http.routers.bitwarden.rule=Host(`bw.${DOMAIN}`)"
      - "traefik.http.routers.bitwarden.service=bitwarden"
      - "traefik.http.services.bitwarden.loadbalancer.server.port=80"
      - "traefik.http.routers.bitwarden-websocket.entrypoints=websecure"
      - "traefik.http.routers.bitwarden-websocket.tls.certresolver=myresolver"
      - "traefik.http.routers.bitwarden-websocket.rule=Host(`bw.${DOMAIN}`) && Path(`/notifications/hub`)"
      - "traefik.http.routers.bitwarden-websocket.service=bitwarden-websocket"
      - "traefik.http.services.bitwarden-websocket.loadbalancer.server.port=3012"

  bitwarden_ldap:
    container_name: bitwarden_ldap
    image: vividboarder/bitwarden_rs_ldap
    volumes:
      - ${CONFIGROOT}/bitwarden/config.toml:/config.toml:ro
    environment:
      CONFIG_PATH: /config.toml
      RUST_BACKTRACE: 1

  qbittorrentvpn:
    container_name: qbittorrentvpn
    image: binhex/arch-qbittorrentvpn:latest
    depends_on:
      - traefik
    restart: always
    privileged: true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    environment:
      - VPN_PROV=custom
      - VPN_CLIENT=wireguard
      - LAN_NETWORK=${LAN_NETWORK}
      - ENABLE_PRIVOXY=yes
      - WEBUI_PORT=8112
      - PUID=${PUID}
      - PGID=${PGID}
    ports:
      - 8118:8118
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${MEDIAROOT}/downloads:/media/downloads
      - ${CONFIGROOT}/qbittorrentvpn:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8112"
      - "traefik.http.routers.qbittorrent.entrypoints=websecure"
      - "traefik.http.routers.qbittorrent.tls.certresolver=myresolver"
      - "traefik.http.routers.qbittorrent.rule=Host(`torrent.${DOMAIN}`)"

  jackett:
    container_name: jackett
    image: ghcr.io/linuxserver/jackett:latest
    depends_on:
      - traefik
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
    volumes:
      - ${MEDIAROOT}/downloads:/media/downloads
      - ${CONFIGROOT}/jackett:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${DOMAIN}`)"
      - "traefik.http.routers.jackett.entrypoints=websecure"
      - "traefik.http.routers.jackett.tls.certresolver=myresolver"
      - "traefik.http.routers.jackett.middlewares=auth"
      - "traefik.http.routers.jackett.priority=1"
      - "traefik.http.routers.jackett-api.rule=Host(`jackett.${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.jackett-api.entrypoints=websecure"
      - "traefik.http.routers.jackett-api.tls.certresolver=myresolver"
      - "traefik.http.routers.jackett-api.priority=2"

  cloudproxy:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: always

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    depends_on:
      - traefik
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIGROOT}/sonarr:/config
      - ${MEDIAROOT}:/media
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=myresolver"
      - "traefik.http.routers.sonarr.middlewares=auth"
      - "traefik.http.routers.sonarr.priority=1"
      - "traefik.http.routers.sonarr-api.rule=Host(`sonarr.${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.sonarr-api.entrypoints=websecure"
      - "traefik.http.routers.sonarr-api.tls.certresolver=myresolver"
      - "traefik.http.routers.sonarr-api.priority=2"

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    depends_on:
      - traefik
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIGROOT}/radarr:/config
      - ${MEDIAROOT}:/media
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls.certresolver=myresolver"
      - "traefik.http.routers.radarr.middlewares=auth"
      - "traefik.http.routers.radarr.priority=1"
      - "traefik.http.routers.radarr-api.rule=Host(`radarr.${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.radarr-api.entrypoints=websecure"
      - "traefik.http.routers.radarr-api.tls.certresolver=myresolver"
      - "traefik.http.routers.radarr-api.priority=2"

  lidarr:
    container_name: lidarr
    image: linuxserver/lidarr:nightly
    depends_on:
      - traefik
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
    volumes:
      - ${CONFIGROOT}/lidarr:/config
      - ${MEDIAROOT}:/media
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)"
      - "traefik.http.routers.lidarr.entrypoints=websecure"
      - "traefik.http.routers.lidarr.tls.certresolver=myresolver"
      - "traefik.http.routers.lidarr.middlewares=auth"
      - "traefik.http.routers.lidarr.priority=1"
      - "traefik.http.routers.lidarr-api.rule=Host(`lidarr.${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.lidarr-api.entrypoints=websecure"
      - "traefik.http.routers.lidarr-api.tls.certresolver=myresolver"
      - "traefik.http.routers.lidarr-api.priority=2"

  nextcloud:
    container_name: nextcloud
    image: nextcloud
    restart: always
    depends_on:
      - postgres
      - redis
    sysctls:
      - net.ipv4.ip_unprivileged_port_start=0
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DATABASE_PASS}
      - NEXTCLOUD_ADMIN_USER=admin
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - REDIS_HOST=redis
      - NEXTCLOUD_TRUSTED_DOMAINS=nc.${DOMAIN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIGROOT}/nextcloud:/var/www/html
      - ${NEXTCLOUDROOT}:/var/www/html/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nc.${DOMAIN}`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls.certresolver=myresolver"
      - "traefik.http.routers.nextcloud.middlewares=cloud_headers,cloud_redirectregex"
      - "traefik.http.middlewares.cloud_headers.headers.framedeny=true"
      - "traefik.http.middlewares.cloud_headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.cloud_headers.headers.stsPreload=true"
      - "traefik.http.middlewares.cloud_headers.headers.stsSeconds=15552001"
      - "traefik.http.middlewares.cloud_redirectregex.redirectregex.regex=/.well-known/(card|cal)dav"
      - "traefik.http.middlewares.cloud_redirectregex.redirectregex.replacement=/remote.php/dav/"

  jellyfin:
    container_name: jellyfin
    image: ghcr.io/linuxserver/jellyfin:latest
    depends_on:
      - traefik
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
    volumes:
      - ${CONFIGROOT}/jellyfin:/config
      - ${MEDIAROOT}:/media
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN}`) || (Host(`${DOMAIN}`) && PathPrefix(`/jellyfin`))"
      - "traefik.http.routers.jellyfin.entrypoints=websecure"
      - "traefik.http.routers.jellyfin.tls.certresolver=myresolver"

  pp-1:
    container_name: pp-1
    image: photoprism/photoprism:latest
    restart: always
    user: "${PUID}:${PGID}"
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    depends_on:
      - mariadb
    healthcheck:
      test: ["CMD", "photoprism", "status"]
      interval: 60s
      timeout: 15s
      retries: 5
    environment:
      - PHOTOPRISM_ADMIN_PASSWORD=${PHOTOPRISM_ADMIN_PASSWORD}
      - PHOTOPRISM_PUBLIC=false
      - PHOTOPRISM_SITE_URL=https://pp-1.${DOMAIN}/
      - PHOTOPRISM_HTTP_PORT=2342
      - PHOTOPRISM_DATABASE_DRIVER=mysql
      - PHOTOPRISM_DATABASE_DSN=photoprism:${PHOTOPRISM_DATABASE_PASS}@tcp(mariadb:3306)/pp_1?charset=utf8mb4,utf8&parseTime=true
      - PHOTOPRISM_ORIGINALS_LIMIT=10000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIGROOT}/pp-1:/photoprism/storage
      - ${NEXTCLOUDROOT}/mesnigan/files/Photos:/photoprism/originals
      - ${NEXTCLOUDROOT}/mesnigan/files/Videos:/photoprism/originals/Videos
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pp-1.entrypoints=websecure"
      - "traefik.http.routers.pp-1.tls.certresolver=myresolver"
      - "traefik.http.routers.pp-1.rule=Host(`pp-1.${DOMAIN}`)"

  pp-2:
    container_name: pp-2
    image: photoprism/photoprism:latest
    restart: always
    user: "${PUID}:${PGID}"
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    depends_on:
      - mariadb
    healthcheck:
      test: ["CMD", "photoprism", "status"]
      interval: 60s
      timeout: 15s
      retries: 5
    environment:
      - PHOTOPRISM_ADMIN_PASSWORD=${PHOTOPRISM_ADMIN_PASSWORD}
      - PHOTOPRISM_PUBLIC=false
      - PHOTOPRISM_SITE_URL=https://pp-2.${DOMAIN}/
      - PHOTOPRISM_HTTP_PORT=2343
      - PHOTOPRISM_DATABASE_DRIVER=mysql
      - PHOTOPRISM_DATABASE_DSN=photoprism:${PHOTOPRISM_DATABASE_PASS}@tcp(mariadb:3306)/pp_2?charset=utf8mb4,utf8&parseTime=true
      - PHOTOPRISM_ORIGINALS_LIMIT=10000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIGROOT}/pp-2:/photoprism/storage
      - ${MEDIAROOT}/photos/jimmy:/photoprism/originals
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.pp-2.loadbalancer.server.port=2343"
      - "traefik.http.routers.pp-2.entrypoints=websecure"
      - "traefik.http.routers.pp-2.tls.certresolver=myresolver"
      - "traefik.http.routers.pp-2.rule=Host(`pp-2.${DOMAIN}`)"

  rotki:
    container_name: rotki
    image: rotki/rotki:latest
    depends_on:
      - traefik
    restart: always
    volumes:
      - ${CONFIGROOT}/rotki:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rotki.rule=Host(`rotki.${DOMAIN}`)"
      - "traefik.http.routers.rotki.entrypoints=websecure"
      - "traefik.http.routers.rotki.tls.certresolver=myresolver"

  mariadb:
    container_name: mariadb
    restart: always
    image: mariadb
    entrypoint: sh -c "
      echo 'CREATE USER IF NOT EXISTS \"photoprism\"@\"%\" IDENTIFIED BY \"${PHOTOPRISM_DATABASE_PASS}\";
      CREATE DATABASE IF NOT EXISTS pp_1;
      CREATE DATABASE IF NOT EXISTS pp_2;
      GRANT ALL PRIVILEGES ON *.* TO \"photoprism\"@\"%\";' > /docker-entrypoint-initdb.d/init.sql;
      /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIGROOT}/db/mariadb:/var/lib/mysql

  postgres:
    container_name: postgres
    restart: always
    image: postgres
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DATABASE_PASS}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIGROOT}/db/postgres:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIGROOT}/db/redis:/data
